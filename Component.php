<?phpnamespace gugglegum\Yii2\Extension\CookieLanguageSelector;use Yii;use yii\base\Component as BaseComponent;use yii\base\InvalidCallException;use yii\base\InvalidParamException;use yii\web\Cookie;/** * Yii2 language selector component based on cookies mechanism * * @author Paul Melekhov <gugglegum@gmail.com> * @package gugglegum\Yii2\Extension\CookieLanguageSelector */class Component extends BaseComponent{    public $defaultLanguage;    public $validLanguages = [];    public $cookieName = 'lang';    public $cookieExpire = 7776000; // 90 * 86400 = 7776000    private $_initialized = false;    public function init()    {        parent::init();        Yii::$app->language = $this->getLanguage();        $this->_initialized = true;    }    /**     * Returns current language     *     * @return string     */    public function getLanguage()    {        if (! $this->_initialized) {            $language = Yii::$app->request->cookies->getValue($this->cookieName);            if ($language === null || !$this->_isValidLanguage($language)) {                $language = $this->defaultLanguage;            }        } else {            $language = Yii::$app->language;        }        return $language;    }    /**     * Stores new language in cookie & application parameter     *     * @param $language     * @throws InvalidParamException     * @throws InvalidCallException     */    public function setLanguage($language)    {        if (! $this->_isValidLanguage($language)) {            throw new InvalidParamException("Language '{$language}' is invalid");        }        Yii::$app->language = $language;        $cookie = new Cookie([            'name' => $this->cookieName,            'value' => $language,            'expire' => time() + $this->cookieExpire,        ]);        Yii::$app->response->cookies->add($cookie);    }    /**     * Checks is passed language valid     *     * @param $language     * @return bool     */    private function _isValidLanguage($language)    {        return in_array($language, $this->validLanguages, true);    }}